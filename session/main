let SessionLoad = 1
let s:so_save = &g:so | let s:siso_save = &g:siso | setg so=0 siso=0 | setl so=-1 siso=-1
let v:this_session=expand("<sfile>:p")
silent only
silent tabonly
cd ~/
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +1 work/info/main.cpp
badd +1 work/info/main.in
badd +1 work/info/main.out
badd +0 NERD_tree_1
argglobal
%argdel
edit NERD_tree_1
set splitbelow splitright
wincmd _ | wincmd |
vsplit
wincmd _ | wincmd |
vsplit
2wincmd h
wincmd w
wincmd w
wincmd _ | wincmd |
split
1wincmd k
wincmd w
set nosplitbelow
set nosplitright
wincmd t
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
exe 'vert 1resize ' . ((&columns * 31 + 95) / 190)
exe 'vert 2resize ' . ((&columns * 117 + 95) / 190)
exe '3resize ' . ((&lines * 1 + 25) / 50)
exe 'vert 3resize ' . ((&columns * 40 + 95) / 190)
exe '4resize ' . ((&lines * 46 + 25) / 50)
exe 'vert 4resize ' . ((&columns * 40 + 95) / 190)
argglobal
balt work/info/main.cpp
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal nofen
silent! normal! zE
let &fdl = &fdl
let s:l = 1 - ((0 * winheight(0) + 24) / 48)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 1
normal! 0
lcd ~/work/info
wincmd w
argglobal
if bufexists("~/work/info/main.cpp") | buffer ~/work/info/main.cpp | else | edit ~/work/info/main.cpp | endif
if &buftype ==# 'terminal'
  silent file ~/work/info/main.cpp
endif
balt ~/work/info/main.in
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let &fdl = &fdl
let s:l = 5 - ((4 * winheight(0) + 24) / 48)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 5
normal! 0
lcd ~/work/info
wincmd w
argglobal
if bufexists("~/work/info/main.in") | buffer ~/work/info/main.in | else | edit ~/work/info/main.in | endif
if &buftype ==# 'terminal'
  silent file ~/work/info/main.in
endif
balt ~/work/info/main.out
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let &fdl = &fdl
let s:l = 1 - ((0 * winheight(0) + 0) / 1)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 1
normal! 0
lcd ~/work/info
wincmd w
argglobal
if bufexists("~/work/info/main.out") | buffer ~/work/info/main.out | else | edit ~/work/info/main.out | endif
if &buftype ==# 'terminal'
  silent file ~/work/info/main.out
endif
balt ~/work/info/main.in
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let &fdl = &fdl
let s:l = 1 - ((0 * winheight(0) + 23) / 46)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 1
normal! 02|
lcd ~/work/info
wincmd w
2wincmd w
exe 'vert 1resize ' . ((&columns * 31 + 95) / 190)
exe 'vert 2resize ' . ((&columns * 117 + 95) / 190)
exe '3resize ' . ((&lines * 1 + 25) / 50)
exe 'vert 3resize ' . ((&columns * 40 + 95) / 190)
exe '4resize ' . ((&lines * 46 + 25) / 50)
exe 'vert 4resize ' . ((&columns * 40 + 95) / 190)
tabnext 1
if exists('s:wipebuf') && len(win_findbuf(s:wipebuf)) == 0&& getbufvar(s:wipebuf, '&buftype') isnot# 'terminal'
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 winminheight=1 winminwidth=1 shortmess=filnxtToOFI
let s:sx = expand("<sfile>:p:r")."x.vim"
if filereadable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &g:so = s:so_save | let &g:siso = s:siso_save
nohlsearch
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
